#lang racket

(define (null-ld? obj)
	(and (not (null? obj)) (pair? obj) (eq? (car obj) (cdr obj)))
)

(define (listdiff? obj)
  (if (null-ld? obj) 
    #t
    (if (and (not (null? obj)) (pair? obj) (pair? (car obj)))
      (listdiff? (cons (cdr (car obj)) (cdr obj)))
      #f
    )
  )
)

(define (cons-ld obj listdiff)
  (if (listdiff? listdiff)
    (cons (cons obj (car listdiff) (cdr listdiff)))
    (error "Second arg must be a Listdiff.")
  )
)

(define (car-ld listdiff)
  (if (and (listdiff? listdiff) (not (null-ld? listdiff))) 
    (car (car listdiff)) 
    (error "Error.")
  )
)

(define (cdr-ld listdiff)
  (if (and (listdiff? listdiff) (not (null-ld? listdiff)))  
    (cons (cdr (car listdiff)) (cdr listdiff))
    (error "Error.")
  )
)

(define (listdiff obj . args)
  (cons (cons obj args) '())
)

(define (length-ld listdiff)
  (define (len-accum ld accum)
    (if (null-ld? ld)
      accum
      (if (listdiff? ld)
        (len-accum (cdr-ld ld) (+ accum 1))
        (error "Error.")
      )
    )
  )

  (len-accum listdiff 0)
)

#|
(define (append-ld listdiff . args)
  (if (null? args)
    listdiff
    (append-ld 
      (cons 
        (append (car listdiff) (car (car args))) 
        (cdr (car args))
      )                                                     ; new ld 
      (cdr args)                                            ; new args
    )
  )
)
|#


(define (append-ld listdiff . args)
  (if (null? args) listdiff
    (append-ld 
      (cons 
        (append (take (car listdiff) (length-ld listdiff)) (car (car args))) 
        (cdr (car args))
      ) 
      (cdr args)
    )
  )
)



; Test Cases
(define ils (append '(a e i o u) 'y))
(define d1 (cons ils (cdr (cdr ils))))
(define d2 (cons ils ils))
(define d3 (cons ils (append '(a e i o u) 'y)))
(define d4 (cons '() ils))
(define d5 0)
(define d6 (listdiff ils d1 37))
(define d7 (append-ld d1 d2 d6))

(null-ld? d1)                          ;===>  #f
(null-ld? d2)                          ;===>  #t
(null-ld? d3)                          ;===>  #f
(null-ld? d6)                          ;===>  #f

(listdiff? d1)                         ;===>  #t
(listdiff? d2)                         ;===>  #t
(listdiff? d3)                         ;===>  #f
(listdiff? d4)                         ;===>  #f
(listdiff? d5)                         ;===>  #f
(listdiff? d6)                         ;===>  #t
(listdiff? d7)                         ;===>  #t                   

(car-ld d1)                            ;===>  a
;(car-ld d2)                            ;===>  error
;(car-ld d3)                            ;===>  error
(car-ld d6)                            ;===>  (a e i o u . y)
